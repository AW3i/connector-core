<#@ template  debug="true" hostSpecific="true" encoding="utf-8" #>
<#@ output extension=".php" #>

<#@ assembly name="System.Core" #>
<#@ assembly name="$(SolutionDir)\JTL.Connector.Database\bin\Debug\JTL.Connector.dll" #>
<#@ assembly name="$(SolutionDir)\JTL.Connector.Database\bin\Debug\JTL.Connector.Database.dll" #>

<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>

<#@ import namespace="JTL.Connector" #>
<#@ import namespace="JTL.Connector.Database" #>

<#@ include file="../../../TemplateDataHelper.ttinclude" #>
<#@ include file="../../../TemplateFileManagerV2.1.ttinclude" #>

<#
var manager = TemplateFileManager.Create(this);

var assembly = typeof(JTL.Connector.Database.DataModel).Assembly;
var entities = TemplateEntity.GetTypesWithHelpAttribute(assembly, typeof(JTL.Connector.Attributes.ModelObjectAttribute));

foreach (var ctrl in entities)
{
    var entityInstance = Activator.CreateInstance(ctrl) 
        as JTL.Connector.Database.IDataModel;

    if (entityInstance == null)
        continue;

    var className = ctrl.Name;
    var properties = entityInstance.GetModelProperties();

    var modelObject = ctrl.GetCustomAttributes(typeof (JTL.Connector.Attributes.ModelObjectAttribute), true)[0] 
        as JTL.Connector.Attributes.ModelObjectAttribute;

    var classDescription = string.IsNullOrEmpty(modelObject.Description)
        ? "" : modelObject.Description;

    manager.StartNewFile(className + ".php");
#>
<?php
/**
 * @copyright 2010-2014 JTL-Software GmbH
 * @package jtl\Connector\Type
 */

namespace jtl\Connector\Type;

use jtl\Connector\Type\PropertyInfo;

/**
 * @access public
 * @package jtl\Connector\Type
 */
class Product extends DataModel
{
    protected function loadProperties()
    {
        return array(
<#
foreach (var property in properties
    .Where(p => p != null)
    .OrderByDescending(p => p.IsIdentity)
    .ThenBy(p => p.PropertyName)
    .ToList())
{
    var defaultValue = TemplateEntity.GetDefaultPropertyValue(property);
	var isPrimary = property.IsPrimary.ToString().ToLower();
	var isIdentity = property.IsIdentity.ToString().ToLower();
	var isNavigation = property.IsNavigation.ToString().ToLower();
	var typeName = TemplateEntity.IsNativePropertyType(property)
		? TemplateEntity.GetNativeEntityName(property) : ("\\jtl\\Connector\\Model\\" + TemplateEntity.GetEntityTypeName(property));
#>
			new PropertyInfo('<#=property.PropertyName#>', '<#=typeName#>', <#=defaultValue#>, <#=isPrimary#>, <#=isIdentity#>, <#=isNavigation#>),
<#
}
#>
        );
    }
}
<#
}
manager.Process();
#>
